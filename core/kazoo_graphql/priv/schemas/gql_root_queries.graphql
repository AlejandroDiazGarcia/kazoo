type Query {
  "An object with an ID."
  node(id : ID!) : Node
  "Account object"
  account(id : ID!) : Account
  "List of Accounts"
  accounts(
    "Returns the elements in the list that come after the specified cursor."
    after: String
    "Returns the elements in the list that come before the specified cursor."
    before: String
    "Returns the first n elements from the list."
    first: Int
    "Returns the last n elements from the list."
    last: Int): [AccountConnection]
}

"The connection type for Account"
type AccountConnection {
  "A list of edges."
  edges: [AccountEdge]
  "A list of nodes."
  nodes: [Account]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection"
type AccountEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Account
}

"Information about pagination in a connection."
type PageInfo {
  "The cursor to continue paginating forwards."
  nextCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "The cursor to continue paginating backwards"
  previousCursor: String
}
