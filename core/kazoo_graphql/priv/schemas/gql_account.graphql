type Account implements Node {
  id: ID!
  callRecording: AccountCallRecording
  callRestriction: [CallRestriction]
  callWaitingEnabled: CallWaitingBol
  "The account default caller ID parameters."
  callerId: CallerID
  "Custom properties for configuring Caller ID."
  callerIdOptions: CallerIdOptions
  "Default rules used to modify dialed numbers."
  dialPlan: DialPlan
  doNotDisturb: Boolean
  "Determines if the account is currently enabled."
  enabled: Boolean
  "Formates SIP headers."
  formatters: [RequestFormatters]
  "The language for this account."
  language: String
  # TODO: :crying_face:
  # "Fu**ing metaflows"
  # metaFlows: Metaflows
  "The ID of a media object that should be used as the default music on hold."
  musicOnHold: ID
  "A friendly name for the account."
  name: String!
  "Account notification settings."
  notifications: AccountNotifications
  "Full legal name of the organization."
  org: String
  # TODO:
  # "Each property provides functionality that can be applied to calls using the callflow application"
  # preflow: Preflow
  "The realm of the account, ie: `account1.2600hz.com`."
  realm: String! # TODO: write validator, min: 4, max: 253, pattern: "^[.\\w_-]+$"
  "Account ringtone Parameters."
  ringtones: Ringtones
  "Account's default timezone"
  timezone: String # TODO: min: 5 max: 32
  "Topup settings for the account."
  topup: AccountTopup
  "Account's voicemail notify settings"
  voicemailNotify: VoicemailNotify
  "The zone(s) of an account."
  zones: AccountZones
}

type AccountCallRecording {
  account: CallRecording
  endpoint: CallRecording
}

type AccountNotifications {
  "Send emails on these account-firsts."
  firstOccurrence: AccountNotifyFirstOccurrence
  "Low balance settings."
  lowBalance: AccountNotifyLowBalance
}

"Send emails on these account-firsts."
type AccountNotifyFirstOccurrence {
  "Should sent email if the account made their first call."
  sentInitialCall: Boolean
  "Should send email if the account registered their first device."
  sentInitialRegistration: Boolean
}

"Low balance settings."
type AccountNotifyLowBalance {
  "Should the account be checked for this alert."
  enabled: Boolean
  "Timestamp, in gregorian seconds, of when the last low_balance alert was sent."
  lastNotification: Int
  "Has the alert been sent (avoids duplication/spamming)."
  sentLowBalance: Boolean
  "Account balance to send alert on."
  threshold: Int
}

"Topup settings for the account"
type AccountTopup {
  "The account balance when topup occurs."
  threshold: Int
}

type AccountZones {
  "Which zone is considered the account's home zone."
  home: String
}

